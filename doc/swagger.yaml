swagger: "2.0"
info:
  title: Bank Argent API documentation (Phase 1 + Phase 2 Proposition)
  description: >
    Ce document regroupe :
      - **Phase 1** (User Module) : login, signup, profile (fourni par le projet)
      - **Phase 2** (Transactions – proposition) : comptes, transactions, catégories
  version: "1.0.0"
  termsOfService: "http://swagger.io/terms/"
host: localhost:3001
basePath: /api/v1
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header

tags:
  - name: User Module
    description: Endpoints d’authentification et profil utilisateur
  - name: Accounts
    description: Comptes de l'utilisateur authentifié (Phase 2)
  - name: Transactions
    description: Consultation et édition des transactions (Phase 2)
  - name: Categories
    description: Catégories suggérées (Phase 2, optionnel)

paths:
  /user/login:
    post:
      tags: [User Module]
      summary: Login
      description: API for Login
      parameters:
        - in: body
          name: body
          description: Login Payload
          required: true
          schema:
            $ref: "#/definitions/Login"
      responses:
        "200":
          description: Login Successfully
          schema:
            $ref: "#/definitions/LoginResponse"
        "400":
          description: Invalid Fields
        "500":
          description: Internal Server Error

  /user/signup:
    post:
      tags: [User Module]
      summary: Signup
      description: API for Signup
      parameters:
        - in: body
          name: body
          description: Signup Payload
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: Signup Successfully
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: Invalid Fields
        "500":
          description: Internal Server Error

  /user/profile:
    post:
      security:
        - Bearer: []
      tags: [User Module]
      summary: User Profile API
      description: API for fetching a user profile
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
          type: string
      responses:
        "200":
          description: User profile retrieved successully
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: Invalid Fields
        "500":
          description: Internal Server Error
    put:
      security:
        - Bearer: []
      tags: [User Module]
      summary: User Profile API
      description: API for updating a user profile
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
          type: string
        - in: body
          name: body
          description: Update user profile attributes
          required: true
          schema:
            $ref: "#/definitions/UserProfile"
      responses:
        "200":
          description: User profile updated successully
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: Invalid Fields
        "500":
          description: Internal Server Error

  # ---------- Phase 2 : Accounts & Transactions (Proposition) ----------

  /accounts:
    get:
      security:
        - Bearer: []
      tags: [Accounts]
      summary: Lister les comptes de l'utilisateur
      description: Retourne la liste des comptes de l'utilisateur courant.
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/AccountsResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/UnauthorizedResponse"

  /accounts/{accountId}/transactions:
    get:
      security:
        - Bearer: []
      tags: [Transactions]
      summary: Lister les transactions d'un compte (par mois)
      description: >
        Retourne les transactions d'un compte pour un mois donné (format YYYY-MM).
        Si 'month' est omis, le mois courant est utilisé.
      parameters:
        - name: accountId
          in: path
          required: true
          type: string
          description: Identifiant du compte
        - name: month
          in: query
          required: false
          type: string
          description: Mois ciblé (YYYY-MM). Si omis, mois courant.
          pattern: "^[0-9]{4}-(0[1-9]|1[0-2])$"
          x-example: "2025-10"
        - name: page
          in: query
          required: false
          type: integer
          minimum: 1
          default: 1
        - name: pageSize
          in: query
          required: false
          type: integer
          minimum: 1
          maximum: 100
          default: 31
        - name: sort
          in: query
          required: false
          type: string
          description: Tri par date (desc par défaut)
          enum: ["date", "-date"]
          default: "-date"
        - name: type
          in: query
          required: false
          type: string
          description: Filtrer par type de mouvement
          enum: ["all", "debit", "credit"]
          default: "all"
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/TransactionsPageResponse"
          examples:
            application/json:
              status: 200
              message: OK
              body:
                data:
                  - id: tx_1001
                    date: "2025-10-01T09:12:00Z"
                    description: Coffee Shop
                    amount: 4.5
                    currency: USD
                    balance: 2079.68
                page: 1
                pageSize: 31
                totalItems: 42
                totalPages: 2
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        "404":
          description: Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"

  /transactions/{transactionId}:
    get:
      security:
        - Bearer: []
      tags: [Transactions]
      summary: Détail d'une transaction
      parameters:
        - name: transactionId
          in: path
          required: true
          type: string
          description: Identifiant de la transaction
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/TransactionResponse"
          examples:
            application/json:
              status: 200
              message: OK
              body:
                id: tx_1001
                date: "2025-10-01T09:12:00Z"
                description: Coffee Shop
                amount: 4.5
                currency: USD
                balance: 2079.68
                transactionType: electronic
                category: food
                note: "Latte"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        "404":
          description: Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
    patch:
      security:
        - Bearer: []
      tags: [Transactions]
      summary: Mettre à jour les informations d'une transaction
      description: >
        Édite uniquement les métadonnées utilisateur : `category`, `note`.
        Les champs financiers (amount, currency, balance), la `date` et `transactionType` ne sont pas éditables.
      parameters:
        - name: transactionId
          in: path
          required: true
          type: string
          description: Identifiant de la transaction
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/TransactionUpdate"
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/TransactionResponse"
        "400":
          description: Invalid Fields
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        "404":
          description: Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"

  /transactions/{transactionId}/metadata:
    delete:
      security:
        - Bearer: []
      tags: [Transactions]
      summary: Réinitialiser les informations utilisateur d'une transaction
      description: Supprime `category` et `note` (retour à l'état initial). Idempotent.
      parameters:
        - name: transactionId
          in: path
          required: true
          type: string
          description: Identifiant de la transaction
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        "404":
          description: Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"

  /categories:
    get:
      security:
        - Bearer: []
      tags: [Categories]
      summary: Lister les catégories suggérées (optionnel)
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/CategoriesResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/UnauthorizedResponse"

definitions:
  # ---------- Phase 1 ----------
  User:
    type: object
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
      firstName:
        type: string
        description: user first name
      lastName:
        type: string
        description: user last name

  Login:
    type: object
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password

  ApiResponse:
    type: object
    properties:
      status:
        type: integer
      message:
        type: string
      body:
        type: object
        properties:
          id:
            type: string
          email:
            type: string
          firstName:
            type: string
          lastName:
            type: string

  LoginResponse:
    type: object
    properties:
      token:
        type: string

  UserProfile:
    type: object
    properties:
      firstName:
        type: string
      lastName:
        type: string

  # ---------- Phase 2 (proposition) ----------
  ErrorResponse:
    type: object
    properties:
      status:
        type: integer
        example: 404
      message:
        type: string
        example: Not Found

  UnauthorizedResponse:
    type: object
    properties:
      status:
        type: integer
        example: 401
      message:
        type: string
        example: Unauthorized

  AccountsResponse:
    type: object
    properties:
      status:
        type: integer
        example: 200
      message:
        type: string
        example: OK
      body:
        type: array
        items:
          $ref: "#/definitions/Account"

  CategoriesResponse:
    type: object
    properties:
      status:
        type: integer
        example: 200
      message:
        type: string
        example: OK
      body:
        type: array
        items:
          type: string
        example:
          - Food
          - Groceries
          - Transport
          - Shopping
          - Bills
          - Travel
          - Entertainment

  TransactionResponse:
    type: object
    properties:
      status:
        type: integer
        example: 200
      message:
        type: string
        example: OK
      body:
        $ref: "#/definitions/Transaction"

  TransactionsPageResponse:
    type: object
    properties:
      status:
        type: integer
        example: 200
      message:
        type: string
        example: OK
      body:
        $ref: "#/definitions/TransactionsPage"

  Account:
    type: object
    required: [id, name, type, mask, balance, currency]
    properties:
      id:
        type: string
        example: acc_1
      name:
        type: string
        example: Argent Bank Checking (x8349)
      type:
        type: string
        enum: [CHECKING, SAVINGS, CREDIT_CARD]
      mask:
        type: string
        description: Quatre derniers chiffres
        example: "8349"
      balance:
        type: number
        format: float
        example: 2082.79
      currency:
        type: string
        example: USD

  # Résumé pour la LISTE
  TransactionSummary:
    type: object
    required: [id, date, description, amount, currency, balance]
    properties:
      id:
        type: string
        example: tx_1001
      date:
        type: string
        format: date-time
        example: "2025-10-01T09:12:00Z"
      description:
        type: string
        example: Coffee Shop
      amount:
        type: number
        format: float
        example: 4.5
      currency:
        type: string
        example: USD
      balance:
        type: number
        format: float
        example: 2079.68

  # Détail complet
  Transaction:
    type: object
    required: [id, date, description, amount, currency, balance, transactionType]
    properties:
      id:
        type: string
        example: tx_1001
      date:
        type: string
        format: date-time
        example: "2025-10-01T09:12:00Z"
      description:
        type: string
        example: Coffee Shop
      amount:
        type: number
        format: float
        example: 4.5
      currency:
        type: string
        example: USD
      balance:
        type: number
        format: float
        example: 2079.68
      transactionType:
        type: string
        description: Type de transaction
        enum: [electronic, card, transfer, check, cash]
        example: electronic
      category:
        type: string
        x-nullable: true
        example: food
      note:
        type: string
        x-nullable: true
        maxLength: 500
        example: "Latte"

  TransactionUpdate:
    type: object
    description: Champs éditables côté utilisateur pour une transaction
    additionalProperties: false
    properties:
      category:
        type: string
        x-nullable: true
        maxLength: 80
        example: food
      note:
        type: string
        x-nullable: true
        maxLength: 500
        example: "client meeting at noon"
    minProperties: 1

  TransactionsPage:
    type: object
    required: [data, page, pageSize, totalItems, totalPages]
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/TransactionSummary"
      page:
        type: integer
        example: 1
      pageSize:
        type: integer
        example: 31
      totalItems:
        type: integer
        example: 42
      totalPages:
        type: integer
        example: 2
